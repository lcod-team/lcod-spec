compose:
  - call: lcod://tooling/script@1
    in:
      source: |
        async ({ state }) => {
          const text = typeof state.text === 'string' ? state.text : '';
          const fallback = state.fallback && typeof state.fallback === 'object' && !Array.isArray(state.fallback)
            ? state.fallback
            : {};
          const warningMessage = typeof state.warningMessage === 'string' && state.warningMessage.length > 0
            ? state.warningMessage
            : 'Invalid JSON payload â€“ using fallback object.';

          try {
            const value = JSON.parse(text);
            if (value && typeof value === 'object' && !Array.isArray(value)) {
              return { value, warnings: [], error: null };
            }
            return {
              value: fallback,
              warnings: [warningMessage],
              error: { message: 'Decoded value is not an object' }
            };
          } catch (err) {
            return {
              value: fallback,
              warnings: [warningMessage],
              error: { message: err?.message || String(err) }
            };
          }
        }
      input:
        text: $.text
        fallback: $.fallback
        warningMessage: $.warningMessage
    out:
      value: value
      warnings: warnings
      error: error
