compose:
  - call: lcod://tooling/script@1
    in:
      source: |
        async ({ state }, { imports }) => {
          const ensureString = (value) => (typeof value === 'string' && value.length ? value : null);
          const isAbsolutePath = (value) => /^(?:[A-Za-z]:[\\/]|\/)/.test(value || '');

          const joinPaths = async (...segments) => {
            if (!segments.length) return '';
            let current = segments[0];
            for (let i = 1; i < segments.length; i += 1) {
              const segment = segments[i];
              if (segment == null) continue;
              const joined = await imports.pathJoin({ base: current, segment });
              current = joined?.path ?? current;
            }
            return current;
          };

          const detectCwd = () => {
            const explicitCwd = ensureString(state.cwd);
            if (explicitCwd) return explicitCwd;
            if (typeof process !== 'undefined' && process && typeof process.cwd === 'function') {
              try {
                return process.cwd();
              } catch (_err) {
                // ignore and fall back to '.'
              }
            }
            return '.';
          };

          const baseCwd = detectCwd();
          const projectInput = ensureString(state.projectPath);
          let projectRoot;
          if (!projectInput) {
            projectRoot = baseCwd;
          } else if (isAbsolutePath(projectInput)) {
            projectRoot = projectInput;
          } else {
            projectRoot = await joinPaths(baseCwd, projectInput);
          }

          let cacheDir = ensureString(state.cacheDir);
          if (!cacheDir) {
            cacheDir = await joinPaths(projectRoot, '.lcod', 'cache');
          } else if (!isAbsolutePath(cacheDir)) {
            cacheDir = await joinPaths(projectRoot, cacheDir);
          }

          const downloadsRoot = await joinPaths(cacheDir, 'catalogues');

          return {
            projectRoot,
            cacheDir,
            downloadsRoot
          };
        }
      input:
        projectPath: $.projectPath
        cacheDir: $.cacheDir
        cwd: $.cwd
      imports:
        pathJoin: lcod://axiom/path/join@1
    out:
      projectRoot: projectRoot
      cacheDir: cacheDir
      downloadsRoot: downloadsRoot
