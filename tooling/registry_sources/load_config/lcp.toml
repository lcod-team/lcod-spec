schemaVersion = "2.0"
id = "lcod://tooling/registry_sources/load_config@0.1.0"
version = "0.1.0"
kind = "component"
summary = "Load and parse the registry sources specification, applying default fallbacks when the file is missing."

[palette]
category = "Registry"
icon = "mdi:file-search"
tags = [ "registry", "sources", "config" ]

[deps]
requires = [
  "lcod://tooling/script@1",
  "lcod://axiom/path/join@1",
  "lcod://contract/core/fs/read-file@1"
]

[inputs.projectRoot]
summary = "Resolved project root directory."
required = true
schema = """
{
  "type": "string"
}"""

[inputs.sourcesPath]
summary = "Optional explicit path to sources.json (absolute or relative to project)."
required = false
schema = """
{
  "type": "string"
}"""

[inputs.sourcesText]
summary = "Raw JSON text when the caller already loaded the sources file."
required = false
schema = """
{
  "type": "string"
}"""

[inputs.defaultSourcesSpec]
summary = "Built-in sources specification used when the file is missing."
required = false
schema = """
{
  "type": "object"
}"""

[outputs.sourcesConfig]
summary = "Parsed sources configuration (null when invalid)."
schema = """
{
  "type": "object"
}"""

[outputs.sourcesPath]
summary = "Effective path label for the sources configuration (file path or builtin label)."
schema = """
{
  "type": "string"
}"""

[outputs.sourcesBaseDir]
summary = "Directory used to resolve relative catalogue pointers."
schema = """
{
  "type": "string"
}"""

[outputs.warnings]
summary = "Warnings emitted while loading/reading the configuration."
schema = """
{
  "type": "array"
}"""

[outputs.valid]
summary = "Indicates whether the configuration was parsed successfully."
schema = """
{
  "type": "boolean"
}"""

[documentation]
body = """
Load the registry `sources.json` specification, applying reasonable defaults
when the file is missing. The component resolves the effective file path,
parses the JSON payload, and reports warnings for recoverable issues."""
