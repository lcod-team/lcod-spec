compose:
  - call: lcod://tooling/registry_sources/prepare_env@0.1.0
    in:
      projectPath: $.projectPath
      cacheDir: $.cacheDir
      cwd: $.cwd
    out:
      projectRoot: projectRoot
      cacheDir: cacheDir
      downloadsRoot: downloadsRoot
  - call: lcod://tooling/registry_sources/load_config@0.1.0
    in:
      projectRoot: $.projectRoot
      sourcesPath: $.sourcesPath
      sourcesText: $.sourcesText
      defaultSourcesSpec: $.defaultSourcesSpec
    out:
      sourcesConfig: sourcesConfig
      sourcesPath: sourcesPath
      sourcesBaseDir: sourcesBaseDir
      configWarnings: warnings
      configValid: valid
  - call: lcod://flow/if@1
    in:
      cond: $.configValid
    out:
      registrySources: registrySources
      collectWarnings: collectWarnings
    slots:
      then:
        - call: lcod://tooling/registry_sources/collect_entries@0.1.0
          in:
            sourcesConfig: $.sourcesConfig
            sourcesBaseDir: $.sourcesBaseDir
            downloadsRoot: $.downloadsRoot
          out:
            registrySources: registrySources
            collectWarnings: warnings
      else:
        - call: lcod://impl/set@1
          in:
            registrySources: []
            collectWarnings: []
          out:
            registrySources: registrySources
            collectWarnings: collectWarnings
  - call: lcod://impl/set@1
    in:
      projectRoot: $.projectRoot
      cacheDir: $.cacheDir
      downloadsRoot: $.downloadsRoot
      sourcesPath: $.sourcesPath
      sourcesConfig: $.sourcesConfig
      warnings: $.configWarnings
    out:
      projectRoot: projectRoot
      cacheDir: cacheDir
      downloadsRoot: downloadsRoot
      sourcesPath: sourcesPath
      sourcesConfig: sourcesConfig
      warnings: warnings
  - call: lcod://tooling/array/append@0.1.0
    in:
      items: $.warnings
      values: $.collectWarnings
    out:
      warnings: items
  - call: lcod://tooling/script@1
    in:
      source: |
        async ({ state }) => {
          const warnings = Array.isArray(state.warnings)
            ? state.warnings.filter((value) => typeof value === 'string' && value.length)
            : [];
          return { warnings };
        }
      input:
        warnings: $.warnings
    out:
      warnings: warnings
  - call: lcod://impl/set@1
    in:
      registrySources: $.registrySources
      warnings: $.warnings
      sourcesPath: $.sourcesPath
      projectRoot: $.projectRoot
      cacheDir: $.cacheDir
      downloadsRoot: $.downloadsRoot
      sourcesConfig: $.sourcesConfig
    out:
      registrySources: registrySources
      warnings: warnings
      sourcesPath: sourcesPath
      projectRoot: projectRoot
      cacheDir: cacheDir
      downloadsRoot: downloadsRoot
      sourcesConfig: sourcesConfig
