compose:
  - call: lcod://tooling/script@1
    in:
      source: |
        async ({ state }) => {
          const ensureObject = (value) => (value && typeof value === 'object' && !Array.isArray(value) ? value : null);
          const ensureArray = (value) => (Array.isArray(value) ? value : []);
          const ensureString = (value) => (typeof value === 'string' && value.length ? value : null);

          const entry = ensureObject(state.entry);
          const pointer = ensureObject(state.pointer);
          if (!entry) return { contribution: null };

          const id = ensureString(entry.id);
          const lines = ensureArray(entry.lines);
          if (!id || !lines.length) {
            return { contribution: null };
          }

          const contribution = {
            id,
            type: 'inline',
            lines: lines.map((line) => line)
          };

          if (Number.isFinite(entry.priority)) {
            contribution.priority = Math.trunc(entry.priority);
          }

          const defaults = ensureObject(entry.defaults);
          if (defaults) contribution.defaults = defaults;

          const entryMetadata = ensureObject(entry.metadata);
          const pointerMetadata = ensureObject(pointer?.metadata);
          if (entryMetadata) {
            contribution.metadata = entryMetadata;
          } else if (pointerMetadata) {
            contribution.metadata = pointerMetadata;
          }

          return { contribution };
        }
      input:
        entry: $.entry
        pointer: $.pointer
    out:
      contribution: contribution
