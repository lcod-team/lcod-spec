compose:
  - call: lcod://tooling/value/default_array@0.1.0
    in:
      value: $.queue
    out:
      initialQueue: resolved

  - call: lcod://flow/while@1
    in:
      state:
        queue: $.initialQueue
        contributions: []
        warnings: []
        downloadsRoot: $.downloadsRoot
        sourcesBaseDir: $.sourcesBaseDir
        defaultEntrypoint: $.defaultEntrypoint
        basePriority: $.basePriority
        visited: {}
    children:
      condition:
        - call: lcod://tooling/array/length@0.1.0
          in:
            items: $.queue
          out:
            queueLength: length
        - call: lcod://impl/set@1
          in:
            continue: $.queueLength
          out:
            continue: continue
      body:
        - call: lcod://tooling/array/shift@0.1.0
          in:
            items: $.queue
          out:
            headPointer: head
            restQueue: rest

        - call: lcod://tooling/value/default_array@0.1.0
          in:
            value: $.contributions
          out:
            baseContributions: resolved

        - call: lcod://tooling/value/default_array@0.1.0
          in:
            value: $.warnings
          out:
            baseWarnings: resolved

        - call: lcod://tooling/value/default_array@0.1.0
          in:
            value: $.restQueue
          out:
            baseQueue: resolved

        - call: lcod://tooling/value/default_object@0.1.0
          in:
            value: $.visited
          out:
            currentVisited: resolved

        - call: lcod://tooling/script@1
          in:
            source: |
              async ({ state }) => {
                const visited = state.visited && typeof state.visited === 'object' && !Array.isArray(state.visited)
                  ? { ...state.visited }
                  : {};
                const pointer = state.pointer && typeof state.pointer === 'object' && !Array.isArray(state.pointer)
                  ? state.pointer
                  : null;
                if (!pointer) {
                  return { shouldProcess: false, pointerKey: null, visited };
                }
                let key = null;
                if (typeof pointer.id === 'string' && pointer.id.length > 0) {
                  key = `id:${pointer.id}`;
                } else {
                  try {
                    key = `json:${JSON.stringify(pointer)}`;
                  } catch (_err) {
                    key = `ptr:${Date.now()}-${Math.random().toString(16).slice(2)}`;
                  }
                }
                if (key && visited[key]) {
                  return { shouldProcess: false, pointerKey: key, visited };
                }
                if (key) {
                  visited[key] = true;
                }
                return { shouldProcess: true, pointerKey: key, visited };
              }
            input:
              pointer: $.headPointer
              visited: $.currentVisited
          out:
            shouldProcess: shouldProcess
            pointerKey: pointerKey
            nextVisited: visited

        - call: lcod://flow/if@1
          in:
            cond: $.shouldProcess
          children:
            then:
              - call: lcod://tooling/registry_sources/process_pointer@0.1.0
                in:
                  pointer: $.headPointer
                  downloadsRoot: $.downloadsRoot
                  defaultEntrypoint: $.defaultEntrypoint
                  basePriority: $.basePriority
                out:
                  processedEntry: entry
                  pointerChildren: children
                  processWarnings: warnings

              - call: lcod://tooling/value/default_array@0.1.0
                in:
                  value: $.pointerChildren
                out:
                  pointerChildren: resolved

              - call: lcod://flow/foreach@1
                in:
                  list: $.pointerChildren
                children:
                  body:
                    - call: lcod://tooling/value/is_string_nonempty@0.1.0
                      in:
                        value: $slot.item.baseDir
                      out:
                        childHasBaseDir: ok

                    - call: lcod://flow/if@1
                      in:
                        cond: $.childHasBaseDir
                      children:
                        then:
                          - call: lcod://impl/set@1
                            in:
                              pointerBaseDir: $slot.item.baseDir
                            out:
                              pointerBaseDir: pointerBaseDir
                        else:
                          - call: lcod://impl/set@1
                            in:
                              pointerBaseDir: $.headPointer.baseDir
                            out:
                              pointerBaseDir: pointerBaseDir
                      out:
                        pointerBaseDir: pointerBaseDir

                    - call: lcod://tooling/registry_sources/normalize_pointer@0.1.0
                      in:
                        entry: $slot.item
                        inherited: $.headPointer
                        baseDir: $.pointerBaseDir
                        sourcesBaseDir: $.sourcesBaseDir
                        defaultEntrypoint: $.defaultEntrypoint
                        basePriority: $.basePriority
                        catalogueBaseDir: $.pointerBaseDir
                      out:
                        childPointer: pointer
                        normalizeWarnings: warnings

                    - call: lcod://impl/set@1
                      in:
                        normalized:
                          pointer: $.childPointer
                          warnings: $.normalizeWarnings
                      out:
                        normalized: normalized
                collectPath: $.normalized
                out:
                  normalizedChildren: results

              - call: lcod://tooling/registry_sources/partition_normalized@0.1.0
                in:
                  entries: $.normalizedChildren
                out:
                  normalizedPointers: pointers
                  normalizationWarnings: warnings

              - call: lcod://tooling/registry_sources/build_inline_entry@0.1.0
                in:
                  pointer: $.headPointer
                  entry: $.processedEntry
                out:
                  contribution: contribution

              - call: lcod://tooling/value/is_object@0.1.0
                in:
                  value: $.contribution
                out:
                  hasContribution: ok

              - call: lcod://flow/if@1
                in:
                  cond: $.hasContribution
                children:
                  then:
                    - call: lcod://tooling/array/append@0.1.0
                      in:
                        items: []
                        value: $.contribution
                      out:
                        contributionBatch: items
                out:
                  contributionBatch: contributionBatch

              - call: lcod://tooling/value/default_array@0.1.0
                in:
                  value: $.contributionBatch
                out:
                  contributionBatch: resolved

              - call: lcod://tooling/value/default_array@0.1.0
                in:
                  value: $.normalizedPointers
                out:
                  normalizedPointers: resolved

              - call: lcod://tooling/value/default_array@0.1.0
                in:
                  value: $.processWarnings
                out:
                  normalizedProcessWarnings: resolved

              - call: lcod://tooling/value/default_array@0.1.0
                in:
                  value: $.normalizationWarnings
                out:
                  normalizedNormalizationWarnings: resolved

              - call: lcod://tooling/array/append@0.1.0
                in:
                  items: $.normalizedProcessWarnings
                  values: $.normalizedNormalizationWarnings
                out:
                  pointerWarnings: items

              - call: lcod://tooling/array/append@0.1.0
                in:
                  items: $.baseWarnings
                  values: $.pointerWarnings
                out:
                  updatedWarnings: items

              - call: lcod://tooling/array/append@0.1.0
                in:
                  items: $.baseContributions
                  values: $.contributionBatch
                out:
                  updatedContributions: items

              - call: lcod://tooling/array/append@0.1.0
                in:
                  items: $.baseQueue
                  values: $.normalizedPointers
                out:
                  updatedQueue: items

              - call: lcod://impl/set@1
                in:
                  queue: $.updatedQueue
                out:
                  queue: queue

              - call: lcod://impl/set@1
                in:
                  contributions: $.updatedContributions
                out:
                  contributions: contributions

              - call: lcod://impl/set@1
                in:
                  warnings: $.updatedWarnings
                out:
                  warnings: warnings
              - call: lcod://impl/set@1
                in:
                  visited: $.nextVisited
                out:
                  visited: visited
            else:
              - call: lcod://impl/set@1
                in:
                  queue: $.baseQueue
                out:
                  queue: queue

              - call: lcod://impl/set@1
                in:
                  contributions: $.baseContributions
                out:
                  contributions: contributions

              - call: lcod://impl/set@1
                in:
                  warnings: $.baseWarnings
                out:
                  warnings: warnings
              - call: lcod://impl/set@1
                in:
                  visited: $.nextVisited
                out:
                  visited: visited
          out:
            queue: queue
            contributions: contributions
            warnings: warnings
            visited: visited
    out:
      loopState: state

  - call: lcod://tooling/value/default_array@0.1.0
    in:
      value: $.loopState.contributions
    out:
      contributions: resolved

  - call: lcod://tooling/value/default_array@0.1.0
    in:
      value: $.loopState.warnings
    out:
      warnings: resolved
