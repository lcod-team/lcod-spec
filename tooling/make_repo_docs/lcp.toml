schemaVersion = "2.0"
id = "lcod://tooling/make_repo_docs@0.1.0"
version = "0.1.0"
kind = "component"
summary = "Run documentation generation (`make_component_doc` / `make_package_doc`) across multiple LCOD repositories."

[deps]
requires = [
  "lcod://tooling/value/default_object@0.1.0",
  "lcod://tooling/value/default_array@0.1.0",
  "lcod://contract/core/fs/list_dir@1",
  "lcod://contract/core/fs/read_file@1",
  "lcod://contract/core/parse/toml@1",
  "lcod://tooling/script@1",
  "lcod://flow/foreach@1",
  "lcod://flow/if@1",
  "lcod://impl/set@1",
  "lcod://tooling/make_component_doc@0.1.0",
  "lcod://tooling/make_package_doc@0.1.0"
]

[inputs.roots]
summary = "List of repository directories to scan for `lcp.toml` descriptors."
required = true
schema = """
{
  "type": "array",
  "items": {
    "type": "string",
    "minLength": 1
  }
}"""

[inputs.write]
summary = "When true (default), write generated artefacts to disk."
required = false
schema = """
{
  "type": "boolean",
  "default": true
}"""

[inputs.generateComponentDocs]
summary = "When true (default), regenerate component artefacts while processing workspace packages."
required = false
schema = """
{
  "type": "boolean",
  "default": true
}"""

[inputs.ignorePatterns]
summary = "Optional list of substring patterns used to skip descriptor paths (e.g. `/node_modules/`)."
required = false
schema = """
{
  "type": "array",
  "items": {
    "type": "string"
  }
}"""

[outputs.processed]
summary = "Summary of processed descriptors grouped per root directory."
schema = """
{
  "type": "array",
  "items": {
    "type": "object"
  }
}"""

[documentation]
body = """
Scans every `lcp.toml` in the provided repositories, filters descriptors with
`schemaVersion = "2.0"`, and invokes `make_component_doc` (for regular
components/contracts/flows) or `make_package_doc` (for workspace packages).

This compose is a convenience wrapper so teams can run:

```
node ../lcod-kernel-js/bin/run-compose.mjs \
  --core \
  --compose tooling/make_repo_docs/compose.yaml \
  --state state.json
```

where `state.json` contains:

```json
{
  "roots": [
    "/path/to/lcod-spec",
    "/path/to/lcod-components",
    "/path/to/lcod-resolver"
  ],
  "write": true
}
```
"""
