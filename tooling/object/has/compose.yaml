compose:
  - call: lcod://tooling/value/default_object@0.1.0
    in:
      value: $.target
    out:
      baseObject: resolved

  - call: lcod://tooling/value/default_array@0.1.0
    in:
      value: $.path
    out:
      keyPath: resolved

  - call: lcod://tooling/script@1
    in:
      source: |
        async ({ state }) => {
          const object = state.object && typeof state.object === 'object' && !Array.isArray(state.object)
            ? state.object
            : {};
          const path = Array.isArray(state.path) ? state.path : [];
          if (path.length === 0) {
            return { hasKey: false, value: undefined };
          }
          let cursor = object;
          for (let i = 0; i < path.length; i++) {
            const segment = path[i];
            if (typeof segment !== 'string' || !segment.length) {
              return { hasKey: false, value: undefined };
            }
            if (!cursor || typeof cursor !== 'object' || Array.isArray(cursor) || !Object.prototype.hasOwnProperty.call(cursor, segment)) {
              return { hasKey: false, value: undefined };
            }
            cursor = cursor[segment];
          }
          return { hasKey: true, value: cursor };
        }
      input:
        object: $.baseObject
        path: $.keyPath
    out:
      hasKey: hasKey
      value: value

  - call: lcod://impl/set@1
    in:
      hasKey: $.hasKey
      value: $.value
    out:
      hasKey: hasKey
      value: value
