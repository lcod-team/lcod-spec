compose:
  - call: lcod://tooling/script@1
    in:
      source: |
        async ({ state, imports }) => {
          const root =
            typeof state.componentsRoot === 'string' && state.componentsRoot.length > 0
              ? state.componentsRoot
              : null;
          const warnings = [];
          if (!root) {
            warnings.push('register_local: componentsRoot is required');
            return { components: [], warnings };
          }

          const targets = [
            {
              id: 'lcod://tooling/mcp/session/open@0.1.0',
              composePath: 'tooling/mcp.session.open/compose.yaml'
            },
            {
              id: 'lcod://tooling/mcp/component/scaffold@0.1.0',
              composePath: 'tooling/mcp.component.scaffold/compose.yaml'
            }
          ];

          const components = [];
          for (const target of targets) {
            try {
              const joined = await imports.pathJoin({
                base: root,
                segment: target.composePath
              });
              const resolved =
                typeof joined?.path === 'string' ? joined.path : joined;
              if (!resolved) {
                warnings.push(`register_local: unable to resolve ${target.id}`);
                continue;
              }
              await imports.fsReadFile({ path: resolved, encoding: 'utf-8' });
              components.push({ id: target.id, composePath: resolved });
            } catch (err) {
              warnings.push(`register_local: failed to load ${target.id}: ${err.message}`);
            }
          }

          return { components, warnings };
        }
      input:
        componentsRoot: $.componentsRoot
      imports:
        pathJoin: lcod://axiom/path/join@1
        fsReadFile: lcod://axiom/fs/read-file@1
    out:
      discoveredComponents: components
      discoveryWarnings: warnings

  - call: lcod://tooling/resolver/register@1
    in:
      components: $.discoveredComponents
    out:
      registered: registered
      registerWarnings: warnings

  - call: lcod://tooling/script@1
    in:
      source: |
        async ({ state }) => {
          const warnings = [];
          if (Array.isArray(state.discoveryWarnings)) {
            for (const message of state.discoveryWarnings) {
              if (typeof message === 'string' && message.length > 0) {
                warnings.push(message);
              }
            }
          }
          if (Array.isArray(state.registerWarnings)) {
            for (const message of state.registerWarnings) {
              if (typeof message === 'string' && message.length > 0) {
                warnings.push(message);
              }
            }
          }
          return {
            registered: Number.isFinite(state.registered) ? state.registered : 0,
            warnings
          };
        }
      input:
        registered: $.registered
        discoveryWarnings: $.discoveryWarnings
        registerWarnings: $.registerWarnings
    out:
      registered: registered
      warnings: warnings
