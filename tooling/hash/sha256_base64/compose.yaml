compose:
  - call: lcod://tooling/script@1
    in:
      source: |
        async ({ state }, { imports }) => {
          const text = typeof state.data === 'string' ? state.data : '';
          const result = await imports.hash({ data: text, encoding: 'utf-8' });
          const hex = result?.hex ?? '';
          const clean = hex.trim();
          const bytes = [];
          for (let i = 0; i < clean.length; i += 2) {
            const pair = clean.slice(i, i + 2);
            bytes.push(parseInt(pair, 16));
          }
          const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
          let output = '';
          for (let i = 0; i < bytes.length; i += 3) {
            const b1 = bytes[i];
            const b2 = bytes[i + 1];
            const b3 = bytes[i + 2];
            const hasB2 = Number.isFinite(b2);
            const hasB3 = Number.isFinite(b3);
            const triplet = (b1 << 16) | ((hasB2 ? b2 : 0) << 8) | (hasB3 ? b3 : 0);
            output += chars[(triplet >> 18) & 63];
            output += chars[(triplet >> 12) & 63];
            output += hasB2 ? chars[(triplet >> 6) & 63] : '=';
            output += hasB3 ? chars[triplet & 63] : '=';
          }
          return { hex, base64: output };
        }
      input:
        data: $.data
      imports:
        hash: lcod://contract/core/hash/sha256@1
    out:
      hex: hex
      base64: base64
