{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "title": "tooling/test_checker@1 input",
  "type": "object",
  "required": ["expected"],
  "additionalProperties": false,
  "properties": {
    "compose": {
      "description": "Inline compose definition to evaluate.",
      "type": "array",
      "items": { "type": "object" }
    },
    "composeRef": {
      "description": "Reference to a compose file on disk.",
      "type": "object",
      "required": ["path"],
      "additionalProperties": false,
      "properties": {
        "path": { "type": "string", "description": "Path to a compose.yaml (relative or absolute)." }
      }
    },
    "input": {
      "description": "Initial state supplied to the compose under test.",
      "type": ["object", "array", "string", "number", "boolean", "null"]
    },
    "expected": {
      "description": "Expected output state after the compose completes.",
      "type": ["object", "array", "string", "number", "boolean", "null"]
    },
    "bindings": {
      "description": "Optional contract bindings to inject before execution.",
      "type": "array",
      "items": { "type": "object" }
    },
    "axioms": {
      "description": "Optional axiom implementations or overrides required by the compose.",
      "type": "array",
      "items": { "type": "object" }
    },
    "failFast": {
      "type": "boolean",
      "default": true,
      "description": "Stop on first mismatch instead of collecting all diffs."
    },
    "metadata": {
      "type": "object",
      "description": "Arbitrary metadata forwarded to the checker implementation."
    },
    "streams": {
      "type": "array",
      "description": "Stream handles to create prior to execution.",
      "items": {
        "type": "object",
        "required": ["target", "chunks"],
        "additionalProperties": false,
        "properties": {
          "target": {
            "type": "string",
            "description": "Dot path (e.g. numbers.stream) where the created handle is injected in the input state."
          },
          "encoding": {
            "type": "string",
            "enum": ["utf-8", "utf8", "base64", "hex"],
            "default": "utf-8",
            "description": "Encoding to decode chunk strings before registering the stream."
          },
          "chunks": {
            "type": "array",
            "description": "Sequence of chunk strings that will be emitted by the stream in order.",
            "items": { "type": "string" }
          }
        }
      }
    }
  },
  "oneOf": [
    { "required": ["compose"] },
    { "required": ["composeRef"] }
  ]
}
