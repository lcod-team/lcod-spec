compose:
  - call: lcod://flow/foreach@1
    in:
      list: $.attempts
    children:
      body:
        - call: lcod://contract/core/stream/read@1
          in:
            stream: $.numbers.stream
            decode: utf-8
            maxBytes: 2
          out:
            chunk: $
        - call: lcod://flow/if@1
          in:
            cond: $.chunk.done
          children:
            then:
              - call: lcod://contract/core/stream/close@1
                in:
                  stream: $.numbers.stream
              - call: lcod://flow/break@1
            else:
              - call: lcod://impl/echo@1
                in:
                  value: $.chunk.chunk
                out:
                  val: val
          out:
            val: val
          slots:
            then:
              - call: lcod://contract/core/stream/close@1
                in:
                  stream: $.numbers.stream
              - call: lcod://flow/break@1
            else:
              - call: lcod://impl/echo@1
                in:
                  value: $.chunk.chunk
                out:
                  val: val
    collectPath: $.val
    out:
      results: results
    slots:
      body:
        - call: lcod://contract/core/stream/read@1
          in:
            stream: $.numbers.stream
            decode: utf-8
            maxBytes: 2
          out:
            chunk: $
        - call: lcod://flow/if@1
          in:
            cond: $.chunk.done
          children:
            then:
              - call: lcod://contract/core/stream/close@1
                in:
                  stream: $.numbers.stream
              - call: lcod://flow/break@1
            else:
              - call: lcod://impl/echo@1
                in:
                  value: $.chunk.chunk
                out:
                  val: val
          out:
            val: val
          slots:
            then:
              - call: lcod://contract/core/stream/close@1
                in:
                  stream: $.numbers.stream
              - call: lcod://flow/break@1
            else:
              - call: lcod://impl/echo@1
                in:
                  value: $.chunk.chunk
                out:
                  val: val
