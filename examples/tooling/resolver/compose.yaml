compose:
  - call: lcod://resolver/internal/load-descriptor@1
    in:
      projectPath: $.projectPath
    out:
      descriptor: descriptor
      descriptorText: descriptorText
      descriptorPath: descriptorPath

  - call: lcod://resolver/internal/load-config@1
    in:
      projectPath: $.projectPath
      configPath: $.configPath
    out:
      config: resolverConfig
      configPath: resolvedConfigPath
      warnings: configWarnings

  - call: lcod://resolver/internal/lock-path@1
    in:
      projectPath: $.projectPath
      outputPath: $.outputPath
    out:
      lockPath: lockPath

  - call: lcod://flow/foreach@1
    in:
      list: $.descriptor.deps.requires
    children:
      body:
        - call: lcod://contract/tooling/resolve-dependency@1
          in:
            dependency: $slot.item
            config: $.resolverConfig
            projectPath: $.projectPath
          out:
            resolved: resolved
      else: []
    collectPath: $.resolved
    out:
      components: results

  - call: lcod://impl/set@1
    in:
      dependencyGraph: $.components
      rootIntegrity: null
      aggregatedWarnings: $.configWarnings
    out:
      dependencyGraph: dependencyGraph
      rootIntegrity: rootIntegrity
      aggregatedWarnings: aggregatedWarnings

  - call: lcod://resolver/internal/build-lock@1
    in:
      descriptor: $.descriptor
      dependencyGraph: $.dependencyGraph
      warnings: $.aggregatedWarnings
      rootIntegrity: $.rootIntegrity
    out:
      lockDocument: lockDocument
      lockText: lockText

  - call: lcod://axiom/fs/write-file@1
    in:
      path: $.lockPath
      data: $.lockText
    out:
      ok: wrote

  - call: lcod://tooling/script@1
    in:
      source: |
        async ({ state }) => ({
          lockPath: state.lockPath,
          components: Array.isArray(state.components) ? state.components : [],
          warnings: Array.isArray(state.warnings) && state.warnings.length > 0
            ? state.warnings
            : undefined
        })
      input:
        lockPath: $.lockPath
        components: $.lockDocument.components
        warnings: $.warnings
    out:
      lockPath: lockPath
      components: components
      warnings: warnings
