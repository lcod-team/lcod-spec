{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://lcod.team/schemas/lcp.schema.json",
  "title": "LCOD Component Package (LCP) â€” schemaVersion 2.0",
  "description": "Descriptor for an LCOD component package. The TOML source is interpreted according to this JSON structure.",
  "type": "object",
  "additionalProperties": false,
  "required": ["schemaVersion", "id", "version", "kind", "summary"],
  "$defs": {
    "semver": {
      "type": "string",
      "description": "Semantic Version: MAJOR.MINOR.PATCH with optional prerelease/build.",
      "pattern": "^\\d+\\.\\d+\\.\\d+(?:-[0-9A-Za-z.-]+)?(?:\\+[0-9A-Za-z.-]+)?$",
      "examples": ["1.0.0", "2.1.0-beta.1"]
    },
    "name": {
      "type": "string",
      "pattern": "^[A-Za-z0-9_.-]+$",
      "minLength": 1,
      "description": "Identifier segment. Allowed characters: alphanumerics plus underscore, dot, dash."
    },
    "componentId": {
      "type": "string",
      "description": "Canonical component ID `lcod://<namespace>/<name>@<version>`.",
      "pattern": "^lcod://[a-z0-9_.-]+(?:/[a-z0-9_.-]+)+@\\d+\\.\\d+\\.\\d+(?:-[0-9A-Za-z.-]+)?(?:\\+[0-9A-Za-z.-]+)?$",
      "examples": [
        "lcod://core/http_get@1.0.0",
        "lcod://tooling/value/default_array@0.1.0"
      ]
    },
    "dependencyId": {
      "type": "string",
      "description": "Canonical component reference. Accepts pinned versions or major-only shorthands (`@1`).",
      "pattern": "^lcod://[a-z0-9_.-]+(?:/[a-z0-9_.-]+)+@(?:\\d+|\\d+\\.\\d+\\.\\d+(?:-[0-9A-Za-z.-]+)?(?:\\+[0-9A-Za-z.-]+)?)$",
      "examples": [
        "lcod://flow/foreach@1",
        "lcod://impl/net/fetch@1.2.0"
      ]
    },
    "schemaPath": {
      "type": "string",
      "minLength": 1,
      "description": "Relative path to a JSON Schema artefact."
    },
    "idList": {
      "type": "array",
      "items": { "$ref": "#/$defs/dependencyId" },
      "uniqueItems": true
    },
    "localeTexts": {
      "type": "object",
      "description": "Per-locale overrides for human-facing strings.",
      "patternProperties": {
        "^[a-z]{2}(?:-[A-Z]{2})?$": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "summary": { "type": "string" },
            "description": { "type": "string" }
          }
        }
      }
    },
    "ioEntry": {
      "type": "object",
      "additionalProperties": false,
      "required": ["summary", "schema"],
      "properties": {
        "summary": { "type": "string", "description": "Short explanation (primary locale)." },
        "description": { "type": "string", "description": "Longer Markdown description (primary locale)." },
        "required": { "type": "boolean", "description": "Whether the property is required." },
        "schema": { "type": "string", "description": "JSON Schema fragment stored as a string." },
        "example": { "type": "string", "description": "Single JSON example serialised as a string." },
        "examples": {
          "type": "array",
          "items": { "type": "string" },
          "description": "Multiple JSON examples serialised as strings."
        },
        "default": { "type": "string", "description": "Default JSON value serialised as a string." },
        "locales": { "$ref": "#/$defs/localeTexts" }
      }
    },
    "slotEntry": {
      "type": "object",
      "additionalProperties": false,
      "required": ["summary"],
      "properties": {
        "summary": { "type": "string" },
        "description": { "type": "string" },
        "schema": { "type": "string", "description": "Optional contract for slot inputs/outputs (JSON encoded as string)." },
        "example": { "type": "string", "description": "Example compose snippet for the slot." },
        "locales": { "$ref": "#/$defs/localeTexts" }
      }
    },
    "ioMap": {
      "type": "object",
      "propertyNames": { "$ref": "#/$defs/name" },
      "additionalProperties": { "$ref": "#/$defs/ioEntry" }
    },
    "slotMap": {
      "type": "object",
      "propertyNames": { "$ref": "#/$defs/name" },
      "additionalProperties": { "$ref": "#/$defs/slotEntry" }
    }
  },
  "properties": {
    "schemaVersion": {
      "type": "string",
      "const": "2.0",
      "description": "Descriptor schema version. Must be `\"2.0\"`."
    },
    "id": { "$ref": "#/$defs/componentId" },
    "version": { "$ref": "#/$defs/semver" },
    "kind": {
      "type": "string",
      "description": "Component kind / lifecycle.",
      "enum": ["component", "contract", "axiom", "flow", "ui", "workflow", "function"]
    },
    "summary": { "type": "string", "description": "Short human-facing summary (primary locale)." },
    "documentation": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "body": { "type": "string", "description": "Additional Markdown appended after the generated sections." },
        "locales": { "$ref": "#/$defs/localeTexts" }
      }
    },
    "palette": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "category": { "type": "string" },
        "icon": { "type": "string" },
        "tags": { "type": "array", "items": { "type": "string" }, "uniqueItems": true }
      }
    },
    "hints": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "timeoutMs": { "type": "integer", "minimum": 0 },
        "retries": { "type": "integer", "minimum": 0 },
        "idempotent": { "type": "boolean" },
        "pure": { "type": "boolean" }
      }
    },
    "deps": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "requires": { "$ref": "#/$defs/idList" }
      }
    },
    "inputs": { "$ref": "#/$defs/ioMap" },
    "outputs": { "$ref": "#/$defs/ioMap" },
    "slots": { "$ref": "#/$defs/slotMap" },
    "tool": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "name": { "type": "string" },
        "description": { "type": "string" },
        "inputSchema": { "$ref": "#/$defs/schemaPath" },
        "outputSchema": { "$ref": "#/$defs/schemaPath" }
      },
      "required": ["name"]
    },
    "implements": {
      "$ref": "#/$defs/dependencyId",
      "description": "Contract implemented by this component (where applicable)."
    },
    "implMatrix": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "languages": {
          "type": "array",
          "items": { "type": "string" },
          "uniqueItems": true,
          "description": "Languages for which native implementations exist."
        }
      }
    },
    "ui": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "kind": { "type": "string", "enum": ["react", "svelte", "vue", "webcomponent"] },
        "propsSchema": { "$ref": "#/$defs/schemaPath" },
        "slots": { "type": "array", "items": { "type": "string" }, "uniqueItems": true }
      }
    }
  },
  "allOf": [
    {
      "if": {
        "properties": {
          "kind": { "const": "contract" }
        }
      },
      "then": {
        "properties": {
          "implements": false,
          "implMatrix": false
        }
      }
    }
  ],
  "examples": [
    {
      "schemaVersion": "2.0",
      "id": "lcod://tooling/value/default_array@0.1.0",
      "version": "0.1.0",
      "kind": "component",
      "summary": "Return the value when it is an array, otherwise fallback to a default array.",
      "inputs": {
        "value": {
          "summary": "Candidate list to normalise.",
          "required": false,
          "schema": "{}"
        }
      },
      "outputs": {
        "value": {
          "summary": "Normalised array.",
          "schema": "{ \"type\": \"array\" }"
        }
      }
    }
  ]
}
