{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://lcod.team/schemas/lcp.schema.json",
  "title": "LCOD Component Package (LCP)",
  "description": "Descriptor for an LCOD component package (TOML source interpreted as this JSON shape).",
  "type": "object",
  "additionalProperties": false,
  "required": ["schemaVersion", "id", "name", "namespace", "version", "kind", "tool"],
  "$defs": {
    "semver": {
      "type": "string",
      "description": "Semantic Version: MAJOR.MINOR.PATCH with optional prerelease/build.",
      "pattern": "^\\d+\\.\\d+\\.\\d+(?:-[0-9A-Za-z.-]+)?(?:\\+[0-9A-Za-z.-]+)?$",
      "examples": ["1.0.0", "2.1.0-beta.1", "1.2.3+build.5"]
    },
    "name": {
      "type": "string",
      "pattern": "^[a-z0-9_.-]+$",
      "minLength": 1,
      "description": "Lowercase name. Allowed: a-z, 0-9, underscore, dot, dash."
    },
    "namespace": {
      "type": "string",
      "pattern": "^[a-z0-9_.-]+(?:/[a-z0-9_.-]+)*$",
      "minLength": 1,
      "description": "Lowercase namespace. Segments separated by `/`; allowed characters per segment: a-z, 0-9, underscore, dot, dash."
    },
    "componentId": {
      "type": "string",
      "description": "Canonical component ID lcod://<namespace>/<name>@<version>",
      "pattern": "^lcod://[a-z0-9_.-]+(?:/[a-z0-9_.-]+)+@\\d+\\.\\d+\\.\\d+(?:-[0-9A-Za-z.-]+)?(?:\\+[0-9A-Za-z.-]+)?$",
      "examples": [
        "lcod://core/http_get@1.0.0",
        "lcod://demo/my_weather@0.1.0"
      ]
    },
    "dependencyId": {
      "type": "string",
      "description": "Canonical ID reference allowing major-only shorthand (e.g. @1).",
      "pattern": "^lcod://[a-z0-9_.-]+(?:/[a-z0-9_.-]+)+@(?:\\d+|\\d+\\.\\d+\\.\\d+(?:-[0-9A-Za-z.-]+)?(?:\\+[0-9A-Za-z.-]+)?)$",
      "examples": [
        "lcod://flow/foreach@1",
        "lcod://impl/net/fetch@1.2.0"
      ]
    },
    "schemaPath": {
      "type": "string",
      "minLength": 1,
      "description": "Relative path to a JSON Schema file within the package."
    },
    "idList": {
      "type": "array",
      "items": { "$ref": "#/$defs/dependencyId" },
      "uniqueItems": true
    }
  },
  "properties": {
    "schemaVersion": {
      "type": "string",
      "const": "1.0",
      "description": "LCP schema version understood by this descriptor. Must be \"1.0\" for M0 packages.",
      "examples": ["1.0"]
    },
    "id": { "$ref": "#/$defs/componentId" },
    "name": { "$ref": "#/$defs/name" },
    "namespace": { "$ref": "#/$defs/namespace" },
    "version": { "$ref": "#/$defs/semver" },
    "kind": {
      "type": "string",
      "enum": ["function", "axiom", "ui", "workflow", "contract"],
      "description": "Component kind."
    },
    "summary": { "type": "string", "description": "Short description for human readers." },
    "docs": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "readme": { "type": "string", "description": "Relative path to README.md." },
        "logo": { "type": "string", "description": "Relative path to a logo or image file." }
      }
    },
    "tool": {
      "type": "object",
      "additionalProperties": false,
      "required": ["name", "inputSchema", "outputSchema"],
      "properties": {
        "name": { "type": "string", "description": "Tool call name (MCP-style)." },
        "description": { "type": "string" },
        "inputSchema": { "$ref": "#/$defs/schemaPath" },
        "outputSchema": { "$ref": "#/$defs/schemaPath" }
      }
    },
    "implements": {
      "$ref": "#/$defs/dependencyId",
      "description": "Canonical contract ID implemented by this component. Mandatory for function/workflow/ui implementations that fulfil a contract."
    },
    "hints": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "timeoutMs": { "type": "integer", "minimum": 0, "description": "Timeout hint in milliseconds." },
        "retries": { "type": "integer", "minimum": 0, "description": "Retry count hint." },
        "idempotent": { "type": "boolean" },
        "pure": { "type": "boolean" }
      }
    },
    "deps": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "requires": { "$ref": "#/$defs/idList" }
      }
    },
    "implMatrix": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "languages": {
          "type": "array",
          "items": { "type": "string" },
          "uniqueItems": true,
          "description": "Languages for which native implementations exist (e.g. [\"ts\", \"java\"])."
        }
      },
      "description": "Implementation availability matrix for native (non-composite) components."
    },
    "ui": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "kind": { "type": "string", "enum": ["react", "svelte", "vue", "webcomponent"] },
        "propsSchema": { "$ref": "#/$defs/schemaPath" },
        "slots": { "type": "array", "items": { "type": "string" }, "uniqueItems": true }
      }
    }
  },
  "allOf": [
    {
      "if": { "properties": { "kind": { "const": "contract" } }, "required": ["kind"] },
      "then": {
        "properties": {
          "implements": false,
          "implMatrix": false
        }
      }
    },
    {
      "if": { "properties": { "kind": { "enum": ["function", "workflow", "ui"] } }, "required": ["kind"] },
      "then": {
        "properties": {
          "implements": { "$ref": "#/$defs/dependencyId" }
        }
      }
    }
  ],
  "examples": [
    {
      "schemaVersion": "1.0",
      "id": "lcod://core/http_get@1.0.0",
      "name": "http_get",
      "namespace": "core",
      "version": "1.0.0",
      "kind": "function",
      "tool": {
        "name": "http_get",
        "inputSchema": "schema/http_get.in.json",
        "outputSchema": "schema/http_get.out.json"
      }
    }
  ]
}
