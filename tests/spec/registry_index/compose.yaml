compose:
  - call: lcod://tooling/test_checker@1
    in:
      compose:
        - call: lcod://tooling/registry/index@0.1.0
          in:
            sources:
              - registryId: local
                priority: 0
                lines:
                  - kind: registry
                    id: local
                    type: file
                    url: file:///opt/registry
                  - kind: component
                    id: lcod://demo/catalog
                    version: 1.3.0
                    manifest: file:///opt/registry/catalog/1.3.0/manifest.json
              - registryId: official
                priority: 10
                defaults:
                  type: http
                  url: https://registry.example.com
                jsonl: |
                  {"kind":"registry","id":"official","type":"http","url":"https://registry.example.com"}
                  {"kind":"component","id":"lcod://demo/catalog","version":"1.2.0","manifest":"packages/demo/catalog/1.2.0/manifest.json"}
                  {"kind":"component","id":"lcod://demo/catalog","version":"1.1.0","manifest":"packages/demo/catalog/1.1.0/manifest.json"}
          out:
            registries: registries
            packages: packages
            errors: errors

        - call: lcod://tooling/script@1
          in:
            source: |
              async ({ state }) => {
                const registries = Array.isArray(state.registries) ? state.registries : [];
                const catalogue = Array.isArray(state.packages?.['lcod://demo/catalog'])
                  ? state.packages['lcod://demo/catalog']
                  : [];
                const registryIds = registries.map(reg => reg.id);
                const versions = catalogue.map(entry => entry.version);
                return {
                  registriesOk: registryIds[0] === 'local' && registryIds[1] === 'official' && registries.length === 2,
                  versionsOk: versions.join(',') === '1.3.0,1.2.0,1.1.0'
                };
              }
            input:
              registries: $.registries
              packages: $.packages
          out:
            registriesOk: registriesOk
            versionsOk: versionsOk
      input: {}
      expected:
        registriesOk: true
        versionsOk: true
    out:
      report: $
