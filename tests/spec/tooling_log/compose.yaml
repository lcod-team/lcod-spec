compose:
  - call: lcod://tooling/test_checker@1
    in:
      compose:
        - call: lcod://tooling/script@1
          in:
            source: |
              async () => {
                process.env.LCOD_LOG_LEVEL = 'trace';
                return {};
              }
        - call: lcod://tooling/registry/scope@1
          in:
            bindings:
              lcod://contract/tooling/log@1: lcod://impl/testing/log-capture@1
            components:
              - id: lcod://impl/testing/log-capture@1
                compose:
                  - call: lcod://tooling/script@1
                    in:
                      source: |
                        async ({ state }) => state ?? {}
                      input: __lcod_state__
                    out:
                      entry: $
              - id: lcod://impl/testing/log-captured@1
          out:
            logs: logs
            snapshot: snapshot
          slots:
            - call: lcod://tooling/script@1
              in:
                source: |
                  async () => ({ logs: [], snapshot: '' })
              out:
                logs: logs
                snapshot: snapshot
            - call: lcod://contract/tooling/log@1
              in:
                level: info
                message: baseline
              out:
                entry: $
            - call: lcod://tooling/script@1
              in:
                source: |
                  async ({ state }) => {
                    const logs = Array.isArray(state.logs) ? state.logs : [];
                    const entry = state.entry ?? null;
                    if (!entry || typeof entry !== 'object') return { logs };
                    if (entry.tags && entry.tags.component === 'kernel') return { logs };
                    const snapshot = typeof state.snapshot === 'string' ? state.snapshot : '';
                    const base = {
                      level: entry.level,
                      message: entry.message
                    };
                    if (entry.tags && typeof entry.tags === 'object') {
                      const tags = Object.keys(entry.tags)
                        .sort()
                        .reduce((acc, key) => {
                          acc[key] = entry.tags[key];
                          return acc;
                        }, {});
                      base.tags = tags;
                    }
                    const serialized = JSON.stringify(base);
                    const updatedSnapshot = snapshot ? `${snapshot}\n${serialized}` : serialized;
                    return {
                      logs: [...logs, serialized],
                      snapshot: updatedSnapshot
                    };
                  }
                input:
                  logs: $.logs
                  entry: $.entry
                  snapshot: $.snapshot
              out:
                logs: logs
                snapshot: snapshot
            - call: lcod://tooling/log.context@1
              in:
                tags:
                  requestId: req-123
              out:
                logs: logs
                snapshot: snapshot
              slots:
                - call: lcod://contract/tooling/log@1
                  in:
                    level: info
                    message: first
                  out:
                    entry: $
                - call: lcod://tooling/script@1
                  in:
                    source: |
                      async ({ state }) => {
                        const logs = Array.isArray(state.logs) ? state.logs : [];
                        const entry = state.entry ?? null;
                        if (!entry || typeof entry !== 'object') return { logs };
                        if (entry.tags && entry.tags.component === 'kernel') return { logs };
                        const snapshot = typeof state.snapshot === 'string' ? state.snapshot : '';
                        const base = {
                          level: entry.level,
                          message: entry.message
                        };
                        if (entry.tags && typeof entry.tags === 'object') {
                          const tags = Object.keys(entry.tags)
                            .sort()
                            .reduce((acc, key) => {
                              acc[key] = entry.tags[key];
                            return acc;
                          }, {});
                          base.tags = tags;
                        }
                        const serialized = JSON.stringify(base);
                        const updatedSnapshot = snapshot ? `${snapshot}\n${serialized}` : serialized;
                        return {
                          logs: [...logs, serialized],
                          snapshot: updatedSnapshot
                        };
                      }
                    input:
                      logs: $.logs
                      entry: $.entry
                      snapshot: $.snapshot
                  out:
                    logs: logs
                    snapshot: snapshot
                - call: lcod://tooling/log.context@1
                  in:
                    tags:
                      userId: user-1
                  out:
                    logs: logs
                    snapshot: snapshot
                  slots:
                    - call: lcod://contract/tooling/log@1
                      in:
                        level: warn
                        message: nested
                      out:
                        entry: $
                    - call: lcod://tooling/script@1
                      in:
                        source: |
                          async ({ state }) => {
                            const logs = Array.isArray(state.logs) ? state.logs : [];
                            const entry = state.entry ?? null;
                            if (!entry || typeof entry !== 'object') return { logs };
                            if (entry.tags && entry.tags.component === 'kernel') return { logs };
                            const snapshot = typeof state.snapshot === 'string' ? state.snapshot : '';
                            const base = {
                              level: entry.level,
                              message: entry.message
                            };
                            if (entry.tags && typeof entry.tags === 'object') {
                              const tags = Object.keys(entry.tags)
                                .sort()
                                .reduce((acc, key) => {
                                  acc[key] = entry.tags[key];
                                return acc;
                              }, {});
                              base.tags = tags;
                            }
                            const serialized = JSON.stringify(base);
                            const updatedSnapshot = snapshot ? `${snapshot}\n${serialized}` : serialized;
                            return {
                              logs: [...logs, serialized],
                              snapshot: updatedSnapshot
                            };
                          }
                        input:
                          logs: $.logs
                          entry: $.entry
                          snapshot: $.snapshot
                      out:
                        logs: logs
                        snapshot: snapshot
            - call: lcod://contract/tooling/log@1
              in:
                level: debug
                message: after
              out:
                entry: $
            - call: lcod://tooling/script@1
              in:
                source: |
                  async ({ state }) => {
                    const logs = Array.isArray(state.logs) ? state.logs : [];
                    const entry = state.entry ?? null;
                    if (!entry || typeof entry !== 'object') return { logs };
                    if (entry.tags && entry.tags.component === 'kernel') return { logs };
                    const snapshot = typeof state.snapshot === 'string' ? state.snapshot : '';
                    const base = {
                      level: entry.level,
                      message: entry.message
                    };
                    if (entry.tags && typeof entry.tags === 'object') {
                      const tags = Object.keys(entry.tags)
                        .sort()
                        .reduce((acc, key) => {
                          acc[key] = entry.tags[key];
                        return acc;
                      }, {});
                      base.tags = tags;
                    }
                    const serialized = JSON.stringify(base);
                    const updatedSnapshot = snapshot ? `${snapshot}\n${serialized}` : serialized;
                    return {
                      logs: [...logs, serialized],
                      snapshot: updatedSnapshot
                    };
                  }
                input:
                  logs: $.logs
                  entry: $.entry
                  snapshot: $.snapshot
              out:
                logs: logs
                snapshot: snapshot
            - call: lcod://tooling/script@1
              in:
                source: |
                  async () => {
                    console.warn('script says hi');
                    return {};
                  }
            - call: lcod://impl/testing/log-captured@1
              out:
                captured: $
            - call: lcod://tooling/script@1
              in:
                source: |
                  async ({ state }) => {
                    const entries = Array.isArray(state.captured) ? state.captured : [];
                    const logs = entries.map((entry) => {
                      if (!entry || typeof entry !== 'object') return '';
                      if (entry.tags && entry.tags.component === 'kernel') return '';
                      const base = {
                        level: entry.level,
                        message: entry.message
                      };
                      if (entry.tags && typeof entry.tags === 'object') {
                        const tags = Object.keys(entry.tags)
                          .sort()
                          .reduce((acc, key) => {
                            acc[key] = entry.tags[key];
                            return acc;
                          }, {});
                        if (Object.keys(tags).length) {
                          base.tags = tags;
                        }
                      }
                      return JSON.stringify(base);
                    }).filter(Boolean);
                    return {
                      logs,
                      snapshot: logs.join('\n')
                    };
                  }
                input:
                  captured: $.captured
              out:
                logs: logs
                snapshot: snapshot
        - call: lcod://tooling/script@1
          in:
            source: |
              async () => {
                delete process.env.LCOD_LOG_LEVEL;
                return {};
              }
      expected:
        logs:
          - '{"level":"info","message":"baseline"}'
          - '{"level":"info","message":"first","tags":{"requestId":"req-123"}}'
          - '{"level":"warn","message":"nested","tags":{"requestId":"req-123","userId":"user-1"}}'
          - '{"level":"debug","message":"after"}'
          - '{"level":"warn","message":"script says hi"}'
        snapshot: |-
          {"level":"info","message":"baseline"}
          {"level":"info","message":"first","tags":{"requestId":"req-123"}}
          {"level":"warn","message":"nested","tags":{"requestId":"req-123","userId":"user-1"}}
          {"level":"debug","message":"after"}
          {"level":"warn","message":"script says hi"}
    out:
      report: $
