compose:
  - call: lcod://tooling/test_checker@1
    in:
      compose:
        - call: lcod://tooling/component/build_artifacts@0.1.0
          in:
            descriptorPath: "contracts/core/fs/write_file/lcp.toml"
            write: false
          out:
            build: $
        - call: lcod://tooling/script@1
          in:
            input: "__lcod_state__"
            bindings:
              build:
                path: $.build
            source: |
              async ({ input }) => {
                const result = input.build || {};
                const descriptorLoaded = typeof result.descriptorText === 'string'
                  && result.descriptorText.includes('schemaVersion = "2.0"')
                  && result.descriptorText.includes('lcod://contract/core/fs/write-file@1.0.0');
                const pathOk = result.params
                  && result.params.descriptorPath === 'contracts/core/fs/write_file/lcp.toml'
                  && result.write === false;
                const skippedWrites =
                  result.readmeWriteResult
                  && Object.keys(result.readmeWriteResult).length === 0
                  && result.inputSchemaWriteResult
                  && Object.keys(result.inputSchemaWriteResult).length === 0
                  && result.outputSchemaWriteResult
                  && Object.keys(result.outputSchemaWriteResult).length === 0;
                return {
                  success: Boolean(descriptorLoaded && pathOk && skippedWrites),
                  details: {
                    descriptorLoaded,
                    pathOk,
                    skippedWrites
                  }
                };
              }
          out:
            verification: $
      expected:
        verification:
          success: true
    out:
      report: $
